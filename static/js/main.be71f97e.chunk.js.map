{"version":3,"sources":["images/logo.png","NavigationCard.tsx","Layout.tsx","Home.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","__webpack_require__","p","NavigationCard","props","react_default","a","createElement","Card","className","Body","Title","as","react_router_dom","to","Layout","Container","fluid","Row","id","Col","xl","span","src","logo","width","height","src_NavigationCard","children","Home","href","About","_getRoutes","react_router","exact","path","component","App","basename","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,yPCuBzBC,EAfmC,SAACC,GAC/C,OACIC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,UAAWL,EAAMK,WACnBJ,EAAAC,EAAAC,cAACC,EAAA,EAAKE,KAAN,KACIL,EAAAC,EAAAC,cAACC,EAAA,EAAKG,MAAN,CAAYC,GAAG,MAAf,UACAP,EAAAC,EAAAC,cAAA,YAEJF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAMC,GAAG,KAAT,SACJT,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAMC,GAAG,UAAT,8BCZL,SAASC,EAAOX,GAC3B,OACIC,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAWC,OAAO,GACdZ,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAKC,GAAG,eACJd,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAKC,GAAI,CAAEC,KAAM,GAAKb,UAAU,YAC5BJ,EAAAC,EAAAC,cAAA,OAAKgB,IAAKC,IAAMC,MAAM,QAAQC,OAAO,WAG7CrB,EAAAC,EAAAC,cAACW,EAAA,EAAD,KACIb,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAKC,GAAG,KACJhB,EAAAC,EAAAC,cAACoB,EAAD,CAAgBlB,UAAU,UAE9BJ,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAKC,GAAG,IAAIZ,UAAU,aACjBL,EAAMwB,YChB3B,IAaeC,EAbQ,SAACzB,GACpB,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,0KAGAF,EAAAC,EAAAC,cAAA,4HACqHF,EAAAC,EAAAC,cAAA,KAAGuB,KAAK,6BAAR,yBCH3HC,EAAQ,kBAAM1B,EAAAC,EAAAC,cAAA,qBAgBdyB,EAAa,WACf,OACI3B,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAC0B,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWP,IACjCxB,EAAAC,EAAAC,cAAC0B,EAAA,EAAD,CAAOE,KAAK,SAASC,UAAWL,MAK7BM,EAvBO,WAGlB,OACIhC,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAYyB,SAAS,KACjBjC,EAAAC,EAAAC,cAACQ,EAAD,KACIV,EAAAC,EAAAC,cAAA,WACKyB,QCHDO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxC,EAAAC,EAAAC,cAACuC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.be71f97e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.4b5cb280.png\";","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Card } from 'react-bootstrap';\r\n\r\ninterface INavigationCard {\r\n    className?: string;\r\n}\r\n\r\nconst NavigationCard: React.FC<INavigationCard> = (props: INavigationCard) => {\r\n    return (\r\n        <Card className={props.className}>\r\n            <Card.Body>\r\n                <Card.Title as=\"h3\">Topics</Card.Title>\r\n                <hr/>\r\n            </Card.Body>\r\n            <ul>\r\n                <li><Link to=\"/\">Home</Link></li>\r\n                <li><Link to=\"/about\">About</Link></li>\r\n            </ul>\r\n        </Card>\r\n    );\r\n} \r\n\r\nexport default NavigationCard;","import React from 'react';\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\nimport NavigationCard from './NavigationCard';\r\nimport logo from './images/logo.png';\r\n \r\nexport default function Layout(props: any) {\r\n    return (\r\n        <Container fluid={true}>\r\n            <Row id=\"main-banner\">\r\n                <Col xl={{ span: 3 }} className=\"p-1 pl-5\">\r\n                    <img src={logo} width=\"240px\" height=\"55px\"/>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col xl=\"3\">\r\n                    <NavigationCard className=\"mt-3\"/>\r\n                </Col>\r\n                <Col xl=\"9\" className=\"mt-3 pt-3\">\r\n                    {props.children}\r\n                </Col>\r\n            </Row>            \r\n        </Container>\r\n    );\r\n}","import React from 'react';\r\n\r\nconst Home: React.FC = (props: any) => {\r\n    return (\r\n        <div>\r\n            <p>\r\n                This wiki serves as a reference for various technological principals and configuration procedures that I have collected over the years as a software engineer\r\n            </p>\r\n            <p>\r\n                If you have any questions about any of the content or requests for more information, feel free to contact me at {<a href=\"mailto:oleg3790@gmail.com\">oleg3790@gmail.com</a>}\r\n            </p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Home;","import React from 'react';\nimport './styles/App.scss';\nimport { Route, HashRouter } from 'react-router-dom';\nimport Layout from './Layout';\nimport Home from './Home';\n\nconst About = () => <div>About</div>;\n\nconst App: React.FC = () => {\n\n\n    return (\n        <HashRouter basename=\"/\">\n            <Layout>\n                <div>\n                    {_getRoutes()}\n                </div>\n            </Layout>\n        </HashRouter>\n    );\n}\n\nconst _getRoutes = () => {\n    return (\n        <div>\n            <Route exact path=\"/\" component={Home}/>\n            <Route path=\"/about\" component={About}/>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}