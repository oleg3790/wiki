{"version":3,"sources":["commons/NodeDetails.tsx","Navigation.tsx","commons/ContentTreeMapper.tsx","Layout.tsx","commons/ContentNode.ts","commons/GitHubContentService.ts","App.tsx","serviceWorker.ts","index.tsx","images/logo.png"],"names":["NodeDetails","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","content","contentUrl","fetch","response","text","setState","react_default","a","createElement","react_markdown_default","source","React","Component","Navigation","id","className","contentTree","getRouteLinks","initialLinks","arguments","length","undefined","entries","forEach","_ref3","_ref4","slicedToArray","key","value","push","react_router_dom","to","concat","UrlPath","Layout","src","logo","width","height","alt","src_Navigation","children","ContentNode","responseData","DownloadUrl","GitUrl","HTMLUrl","Name","Path","SHA","Size","Type","URL","Links","download_url","git_url","html_url","name","path","sha","size","type","url","Git","_links","git","HTML","html","Self","self","GitHubContentService","_octokit","_owner","_repo","Octokit","auth","userAgent","baseUrl","_getContentNodes","nodes","_buildContentTree","pathNode","contentCounter","initialContenNodes","repos","getContents","owner","repo","status","tmpWorkItems","exit","Array","isArray","data","workItem","contentNode","_contentNodeExists","i","encodedUri","encodeURIComponent","console","log","_context2","t0","message","_this2","filter","n","pathLevels","split","indexFile","pop","match","reduce","prev","_toUrlSafePath","contentNodes","node","pathElement","from","r","toLowerCase","replace","App","ghContentService","getSiteContentTree","tree","basename","mapRoutes","initialRoutes","_ref","_ref2","react_router","render","routeProps","NodeDetails_NodeDetails","assign","Boolean","window","location","hostname","ReactDOM","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.b4abdcf8.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactMarkdown from 'react-markdown';\r\n\r\ninterface INodeDetailProps {\r\n    contentUrl: string|null;\r\n}\r\n\r\ninterface INodeDetailState {\r\n    content: string|null;\r\n}\r\n\r\nexport default class NodeDetails extends React.Component<INodeDetailProps, INodeDetailState> {\r\n    constructor(props: INodeDetailProps) {\r\n        super(props);\r\n        this.state = {\r\n            content: null\r\n        }\r\n    }\r\n\r\n    async componentDidMount() {\r\n        if (this.props.contentUrl) {\r\n            const response = await fetch(this.props.contentUrl);\r\n            this.setState({ content: await response.text() });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.state.content && <ReactMarkdown source={this.state.content as string}/>}\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport { getRouteLinks } from './commons/ContentTreeMapper';\r\n\r\ninterface INavigationProps {\r\n    contentTree: object|null;\r\n}\r\n\r\nconst Navigation = (props: INavigationProps): JSX.Element => {    \r\n\r\n    \r\n    return (\r\n        <div id=\"navigation\">\r\n            <ul className=\"nav flex-column\">\r\n                {props.contentTree && getRouteLinks(props.contentTree)}\r\n            </ul>\r\n        </div>\r\n    );\r\n} \r\n\r\nexport default Navigation;","import React from 'react';\r\nimport { Route } from \"react-router\";\r\nimport NodeDetails from \"./NodeDetails\";\r\nimport { Link } from 'react-router-dom';\r\n\r\n/**\r\n * Recursively maps routes, using the content tree\r\n * @param content \r\n * @param initialRoutes Any initial routes to be passed \r\n */\r\nexport const mapRoutes = (contentTree: object, initialRoutes: JSX.Element[] = []): JSX.Element[] => {\r\n    Object.entries(contentTree).forEach(([key, value]) => {\r\n        if (typeof value === 'string') {\r\n            return initialRoutes;\r\n        }\r\n        initialRoutes.push(\r\n            <Route key={key} path={`/${value.UrlPath ? value.UrlPath : \"error\"}`} \r\n                   render={(routeProps) => <NodeDetails {...routeProps} contentUrl={value.DownloadUrl ? value.DownloadUrl : null}/>}/>);\r\n        return mapRoutes(value, initialRoutes);\r\n    });\r\n    return initialRoutes;\r\n}\r\n\r\n/**\r\n * Builds the route links, using the contentTree passed\r\n * @param contentTree \r\n * @param initialLinks \r\n */\r\nexport const getRouteLinks = (contentTree: object, initialLinks: JSX.Element[] = []): JSX.Element[] =>  {\r\n    Object.entries(contentTree).forEach(([key, value]) => {\r\n        if (typeof value === 'string') {\r\n            return;\r\n        }\r\n        initialLinks.push(<li key={key} className=\"nav-item\"><Link className=\"nav-link\" to={`/${value.UrlPath ? value.UrlPath : \"error\"}`}>{key}</Link></li>)\r\n        return getRouteLinks(value, initialLinks);\r\n    });\r\n    return initialLinks;\r\n};","import React from 'react';\r\nimport Navigation from './Navigation';\r\nimport logo from './images/logo.png';\r\n \r\ninterface ILayoutProps {\r\n    contentTree: object|null;\r\n    children: JSX.Element|JSX.Element[];\r\n}\r\n\r\nexport default function Layout(props: ILayoutProps) {\r\n    return (\r\n        <div className=\"container-fluid\">\r\n            <div id=\"main-banner\" className=\"row\">\r\n                <div className=\"col-6 p-1 pl-5\">\r\n                    <img id=\"main-logo\" src={logo} width=\"50px\" height=\"50px\" alt=\"logo\"/>\r\n                    <h3 id=\"main-title\" className=\"d-inline-block\">Technological Wiki</h3>\r\n                </div>\r\n            </div>\r\n            <div className=\"row\">\r\n                <div className=\"col-xl-3 col-sm-5\">\r\n                    <Navigation contentTree={props.contentTree}/>\r\n                </div>\r\n                <div className=\" col-xl-9 col-sm-7 mt-3 pt-3\">\r\n                    {props.children}\r\n                </div>\r\n            </div>            \r\n        </div>\r\n    );\r\n}","export interface IContentNodeLinks {\r\n    Git: string;\r\n    HTML: string;\r\n    Self: string;\r\n}\r\n\r\nexport interface IContentNode {\r\n    DownloadUrl: string;\r\n    GitUrl: string;\r\n    HTMLUrl: string;\r\n    Name: string;\r\n    Path: string;\r\n    SHA: string;\r\n    Size: number;\r\n    Type: string;\r\n    URL: string;\r\n    Links: IContentNodeLinks;\r\n}\r\n\r\n/**\r\n * Provides strong type and resolver for GitHub API data\r\n */\r\nexport default class ContentNode implements IContentNode {\r\n    public readonly DownloadUrl: string;\r\n    public readonly GitUrl: string;\r\n    public readonly HTMLUrl: string;\r\n    public readonly Name: string;\r\n    public readonly Path: string;\r\n    public readonly SHA: string;\r\n    public readonly Size: number;\r\n    public readonly Type: string;\r\n    public readonly URL: string;\r\n    public readonly Links: IContentNodeLinks;\r\n\r\n    constructor(responseData: any) {\r\n        this.DownloadUrl = responseData.download_url;\r\n        this.GitUrl = responseData.git_url;\r\n        this.HTMLUrl = responseData.html_url;\r\n        this.Name = responseData.name;\r\n        this.Path = responseData.path;\r\n        this.SHA = responseData.sha;\r\n        this.Size = responseData.size;\r\n        this.Type = responseData.type;\r\n        this.URL = responseData.url;\r\n        this.Links = {\r\n            Git: responseData._links.git,\r\n            HTML: responseData._links.html,\r\n            Self: responseData._links.self,\r\n        }\r\n    }\r\n}","import Octokit from '@octokit/rest';\r\nimport ContentNode from './ContentNode';\r\n\r\nexport default class GitHubContentService {\r\n    private readonly _octokit: Octokit;\r\n    private _owner = 'oleg3790';\r\n    private _repo = 'wiki';\r\n\r\n    constructor() {\r\n        this._octokit = new Octokit({\r\n            auth: '',\r\n            userAgent: 'wiki',\r\n            baseUrl: 'https://api.github.com',\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Gets an object that models the site-content branch's content\r\n     */\r\n    public async getSiteContentTree(): Promise<object|null> {\r\n        const nodes = await this._getContentNodes('wiki', 0, []);\r\n        return nodes.length > 0 ? this._buildContentTree(nodes) : null;\r\n    }\r\n\r\n    /**\r\n     * Recursively gets all content nodes based off of each resource node in the site-content branch \r\n     * @param pathNode Branch resource path\r\n     * @param contentCounter Used to remember count state during recursion\r\n     * @param tmpResultObj Object used to hold the result during the build\r\n     */\r\n    private async _getContentNodes(pathNode: string, contentCounter: number, initialContenNodes: ContentNode[]): Promise<ContentNode[]> {\r\n        try {\r\n            const response = await this._octokit.repos.getContents({ \r\n                owner: this._owner,\r\n                repo: this._repo,\r\n                path: `${pathNode}?ref=site-content`\r\n            });\r\n\r\n            if (response.status === 200) {\r\n                let tmpWorkItems: any[] = [];\r\n                let exit = false;\r\n                // Check if response data is array or object as response data is object when there is no other dir nodes under the content\r\n                if (Array.isArray(response.data)) {\r\n                    tmpWorkItems = response.data;\r\n                } else if (typeof response.data === 'object') {\r\n                    tmpWorkItems.push(response.data);\r\n                }\r\n\r\n                tmpWorkItems.forEach(workItem => {\r\n                    const contentNode = new ContentNode(workItem)\r\n                    // Recusion exit condition: dont add existing nodes to collection\r\n                    if (this._contentNodeExists(initialContenNodes, contentNode)) {\r\n                        exit = true;\r\n                        return;\r\n                    }\r\n                    initialContenNodes.push(new ContentNode(workItem));                    \r\n                });\r\n\r\n                if (exit) {\r\n                    return initialContenNodes;\r\n                }\r\n\r\n                for (let i = contentCounter; i < initialContenNodes.length; i++) {\r\n                    if (initialContenNodes[i].Type !== 'file') {\r\n                        const encodedUri = encodeURIComponent(initialContenNodes[i].Path);\r\n                        return await this._getContentNodes(encodedUri, i + 1, initialContenNodes);\r\n                    }\r\n                }         \r\n            } else {\r\n                console.log(`GitHub API responded with ${response.status} with ${response.data.length} data elements`);\r\n            }\r\n            return initialContenNodes;\r\n        } catch (ex) {\r\n            console.log(`GitHubContentService.doGetContents Error - ${ex.message}`);\r\n            return [];\r\n        }\r\n    }\r\n\r\n    private _buildContentTree(nodes: ContentNode[]): object {\r\n        let contentTree: any = {};\r\n\r\n        nodes\r\n            .filter(n => n.Type === 'file')\r\n            .forEach(n => {\r\n                const pathLevels = n.Path.split('/');\r\n                let indexFile = pathLevels.pop();\r\n                \r\n                if (indexFile && indexFile.match(/index\\.md/i)) {\r\n                    pathLevels.reduce((prev, path, i) => {\r\n                        if (pathLevels.length - i - 1) {\r\n                            prev[path] = prev[path] || {}\r\n                        } else {\r\n                            prev[path] = prev[path] || { DownloadUrl: n.DownloadUrl, UrlPath: this._toUrlSafePath(path) };\r\n                        }\r\n                        return prev[path];                 \r\n                    }, contentTree);\r\n                }\r\n        });        \r\n        return contentTree;\r\n    }\r\n\r\n    /**\r\n     * Check if node exists in contentNodes\r\n     * @param contentNodes \r\n     * @param node \r\n     */\r\n    private _contentNodeExists(contentNodes: ContentNode[], node: ContentNode) {\r\n        return contentNodes.filter(n => n.Path === node.Path).length > 0;\r\n    }\r\n\r\n    private _toUrlSafePath(pathElement: string): string {\r\n        const regexReplacements = [\r\n            {from: /c#/g, to: 'c-sharp'},\r\n            {from: /\\.+/g, to: 'dot'},\r\n            {from: /\\s{2,}/g, to: ' '},\r\n            {from: /[\\s/\\\\]+/g, to: '-'},\r\n            {from: /[()+~=!@#$%^&*{}?]+/g, to: ''},\r\n        ];\r\n\r\n        regexReplacements.forEach(r => {\r\n            pathElement = pathElement.toLowerCase().replace(r.from, r.to);\r\n        })\r\n        return pathElement;\r\n    }\r\n}\r\n","import React from 'react';\r\nimport './styles/App.scss';\r\nimport { HashRouter } from 'react-router-dom';\r\nimport Layout from './Layout';\r\nimport GitHubContentService from './commons/GitHubContentService';\r\nimport { mapRoutes } from './commons/ContentTreeMapper';\r\n\r\ninterface IAppState {\r\n    contentTree: object|null;\r\n}\r\n\r\nexport default class App extends React.Component<any, IAppState> {\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            contentTree: null\r\n        }\r\n    }\r\n\r\n    async componentDidMount() {\r\n        const ghContentService = new GitHubContentService();\r\n        const tree = await ghContentService.getSiteContentTree();\r\n        this.setState({ contentTree: tree });\r\n    }\r\n\r\n    render() {\r\n        const { contentTree } = this.state;\r\n        return (\r\n            <HashRouter basename=\"/\">\r\n                <Layout contentTree={contentTree}>\r\n                    <div>\r\n                        {contentTree && mapRoutes(contentTree)}\r\n                    </div>\r\n                </Layout>\r\n            </HashRouter>\r\n        );\r\n    }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './styles/index.scss';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/logo.1e842800.png\";"],"sourceRoot":""}