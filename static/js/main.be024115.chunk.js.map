{"version":3,"sources":["services/LocalCacheService.ts","commons/tree-view/TreeNode.tsx","commons/tree-view/TreeView.tsx","Navigation.tsx","commons/BusyMask.tsx","Layout.tsx","commons/ContentNode.ts","commons/ContentTree.ts","commons/GitHubContentService.ts","commons/NodeDetails.tsx","App.tsx","serviceWorker.ts","index.tsx","images/logo.png"],"names":["CacheKeys","getCacheValue","cacheKey","valueKey","cacheObjString","localStorage","getItem","result","JSON","parse","undefined","setCacheValue","value","cacheObj","setItem","stringify","TreeNode","props","handleCollapseToggle","e","nodeName","isCollapsed","node","name","state","collapsed","NavNodesCollapsedState","setState","recurseChildren","childrenNodes","map","key","className","cachedState","this","onClick","children","length","icon","faChevronRight","faChevronDown","size","to","urlPath","React","TreeView","contentTree","mapToTreeNodes","Navigation","id","BusyMask","Layout","src","logo","width","height","alt","isBusy","ContentNode","responseData","DownloadUrl","GitUrl","HTMLUrl","Name","Path","SHA","Size","Type","URL","Links","download_url","git_url","html_url","path","sha","type","url","Git","_links","git","HTML","html","Self","self","ContentTree","downloadUrl","GitHubContentService","auth","_octokit","_owner","_repo","Octokit","userAgent","baseUrl","_getContentNodes","nodes","_buildContentTree","pathNode","contentCounter","initialContenNodes","repos","getContents","owner","repo","response","status","tmpWorkItems","exit","Array","isArray","data","push","forEach","workItem","contentNode","_contentNodeExists","i","encodedUri","encodeURIComponent","console","log","message","filter","n","pathLevels","split","indexFile","pop","match","reduce","prev","find","c","_toUrlSafePath","contentNodes","pathElement","from","r","toLowerCase","replace","NodeDetails","content","contentUrl","fetch","text","source","escapeHtml","Component","App","toggleIsBusy","mapRoutes","initialRoutes","render","routeProps","isError","ghAuth","method","headers","authResponse","debug","ghContentService","getSiteContentTree","tree","basename","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.be024115.chunk.js","sourcesContent":["export enum CacheKeys {\r\n  NavNodesCollapsedState = 'nav-nodes-collapsed-state'\r\n}\r\n\r\nexport const getNavNodeCollapsedState = (nodeName: string): boolean | null =>\r\n  getCacheValue(CacheKeys.NavNodesCollapsedState, nodeName);\r\n\r\nexport const cacheNavNodeCollapsedState = (nodeName: string, isCollapsed: boolean): void =>\r\n  setCacheValue(CacheKeys.NavNodesCollapsedState, nodeName, isCollapsed);\r\n\r\nexport const getCacheValue = (cacheKey: string, valueKey: string): any | null => {\r\n  const cacheObjString = localStorage.getItem(cacheKey);\r\n  const cacheObj: { [index: string]: any } = cacheObjString ? JSON.parse(cacheObjString) : {};\r\n  const result = cacheObj[`\"${valueKey}\"`];\r\n\r\n  return result === undefined ? null : result;\r\n}\r\n\r\nexport const setCacheValue = (cacheKey: string, valueKey: string, value: any): void => {\r\n  const cacheObjString = localStorage.getItem(cacheKey);\r\n  let cacheObj: { [index: string]: any } = cacheObjString\r\n    ? JSON.parse(cacheObjString)\r\n    : {};\r\n  \r\n  cacheObj[`\"${valueKey}\"`] = value;\r\n\r\n  localStorage.setItem(cacheKey, JSON.stringify(cacheObj));\r\n}","import * as React from 'react';\r\nimport '../../styles/TreeView.scss';\r\nimport '../../styles/App.scss';\r\nimport { Link } from 'react-router-dom';\r\nimport ContentTree from '../ContentTree';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faChevronRight, faChevronDown } from '@fortawesome/free-solid-svg-icons';\r\nimport { getNavNodeCollapsedState, cacheNavNodeCollapsedState } from '../../services/LocalCacheService';\r\n\r\ninterface ITreeNodeProps {\r\n  node: ContentTree;\r\n  className?: string;\r\n}\r\n\r\ninterface ITreeNodeState {\r\n  collapsed: boolean\r\n}\r\n\r\nexport default class TreeNode extends React.Component<ITreeNodeProps, ITreeNodeState> {  \r\n  constructor(props: ITreeNodeProps) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      collapsed: true\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    const cachedState: boolean | null = getNavNodeCollapsedState(this.props.node.name); \r\n    this.setState({ collapsed: cachedState === null ? this.state.collapsed : cachedState });\r\n  }\r\n\r\n  handleCollapseToggle = (e: React.MouseEvent) => {\r\n    cacheNavNodeCollapsedState(this.props.node.name, !this.state.collapsed);\r\n    this.setState({ collapsed: !this.state.collapsed });\r\n  }\r\n  \r\n  render(): JSX.Element {\r\n    const { node, className } = this.props;\r\n    const { collapsed } = this.state;\r\n\r\n    if (node) {            \r\n      return (\r\n        <ul key={node.name} className={`nav-item disable-selection ${className}`}>\r\n          <div className=\"row no-gutters pt-1 pb-1\">\r\n            <span className=\"col-1 text-center pointer\" onClick={this.handleCollapseToggle}>\r\n            {(node.children && node.children.length) \r\n              ? <FontAwesomeIcon icon={collapsed ? faChevronRight : faChevronDown} size=\"sm\"/>\r\n              : null}\r\n            </span>\r\n            <Link className=\"col-11 nav-link pt-0 pb-1\" to={`/${node.urlPath}`}>{node.name}</Link>\r\n          </div>\r\n          \r\n          {(node.children && node.children.length)\r\n            ? this.recurseChildren(node.children)\r\n            : null}\r\n        </ul>\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  recurseChildren = (childrenNodes: ContentTree[]) => {\r\n    return childrenNodes.map(node => <TreeNode key={node.name} node={node} className={`pl-4 ${this.state.collapsed && \"tv-collapsed\"}`}/>)\r\n  }\r\n}","import * as React from 'react';\r\nimport ContentTree from '../ContentTree';\r\nimport TreeNode from './TreeNode';\r\n\r\ninterface ITreeViewProps {\r\n  contentTree: ContentTree\r\n}\r\n\r\nconst TreeView = (props: ITreeViewProps) => {\r\n  const { contentTree } = props;\r\n\r\n  const mapToTreeNodes = (contentTree: ContentTree): JSX.Element[] => {\r\n    return contentTree.children.map(node => {\r\n      return <TreeNode key={node.name} node={node} className=\"pl-0\"/>;\r\n    });\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {(contentTree && contentTree.children && contentTree.children.length)\r\n        ? mapToTreeNodes(contentTree)\r\n        : null\r\n      }\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TreeView;","import React from 'react';\r\nimport TreeView from './commons/tree-view/TreeView';\r\nimport ContentTree from './commons/ContentTree';\r\n\r\ninterface INavigationProps {\r\n  contentTree: ContentTree;\r\n}\r\n\r\nconst Navigation = (props: INavigationProps): JSX.Element => {    \r\n  return (\r\n    <div id=\"navigation\">\r\n      <ul className=\"nav flex-column\">\r\n        <TreeView contentTree={props.contentTree}/>\r\n      </ul>\r\n    </div>\r\n  );\r\n} \r\n\r\nexport default Navigation;","import * as React from 'react';\r\nimport '../styles/App.scss';\r\nimport '../styles/Loading.scss';\r\n\r\nconst BusyMask = (props: any) => {\r\n  return (\r\n    <div id=\"busy-mask\">\r\n      <div className=\"lds-ellipsis\"><div></div><div></div><div></div><div></div></div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default BusyMask;","import React from 'react';\r\nimport Navigation from './Navigation';\r\nimport logo from './images/logo.png';\r\nimport ContentTree from './commons/ContentTree';\r\nimport BusyMask from './commons/BusyMask';\r\n \r\ninterface ILayoutProps {\r\n  contentTree: ContentTree;\r\n  children: JSX.Element|JSX.Element[];\r\n  isBusy: boolean;\r\n}\r\n\r\nexport default function Layout(props: ILayoutProps) {\r\n  return (\r\n    <div className=\"container-fluid\">\r\n      <div id=\"main-banner\" className=\"row\">\r\n        <div className=\"col-6 p-1 pl-5\">\r\n          <img id=\"main-logo\" src={logo} width=\"50px\" height=\"50px\" alt=\"logo\"/>\r\n          <h3 id=\"main-title\" className=\"d-inline-block\">Technological Wiki</h3>\r\n        </div>\r\n      </div>\r\n      {props.isBusy\r\n        ? <BusyMask/>\r\n        : (\r\n          <div className=\"row\">               \r\n            <div className=\"col-xl-3 col-sm-5\">\r\n              <Navigation contentTree={props.contentTree}/>\r\n            </div>\r\n            <div className=\" col-xl-9 col-sm-7 mt-3 pt-3\">\r\n              {props.children}\r\n            </div>\r\n          </div>  \r\n        )}\r\n            \r\n    </div>\r\n  );\r\n}","export interface IContentNodeLinks {\r\n  Git: string;\r\n  HTML: string;\r\n  Self: string;\r\n}\r\n\r\nexport interface IContentNode {\r\n  DownloadUrl: string;\r\n  GitUrl: string;\r\n  HTMLUrl: string;\r\n  Name: string;\r\n  Path: string;\r\n  SHA: string;\r\n  Size: number;\r\n  Type: string;\r\n  URL: string;\r\n  Links: IContentNodeLinks;\r\n}\r\n\r\n/**\r\n * Provides strong type and resolver for GitHub API data\r\n */\r\nexport default class ContentNode implements IContentNode {\r\n  public readonly DownloadUrl: string;\r\n  public readonly GitUrl: string;\r\n  public readonly HTMLUrl: string;\r\n  public readonly Name: string;\r\n  public readonly Path: string;\r\n  public readonly SHA: string;\r\n  public readonly Size: number;\r\n  public readonly Type: string;\r\n  public readonly URL: string;\r\n  public readonly Links: IContentNodeLinks;\r\n\r\n  constructor(responseData: any) {\r\n    this.DownloadUrl = responseData.download_url;\r\n    this.GitUrl = responseData.git_url;\r\n    this.HTMLUrl = responseData.html_url;\r\n    this.Name = responseData.name;\r\n    this.Path = responseData.path;\r\n    this.SHA = responseData.sha;\r\n    this.Size = responseData.size;\r\n    this.Type = responseData.type;\r\n    this.URL = responseData.url;\r\n    this.Links = {\r\n      Git: responseData._links.git,\r\n      HTML: responseData._links.html,\r\n      Self: responseData._links.self,\r\n    }\r\n  }\r\n}","export interface IContentTree {\r\n  name: string,\r\n  downloadUrl: string,\r\n  urlPath: string,\r\n  children: IContentTree[]\r\n}\r\n\r\nexport default class ContentTree implements IContentTree {\r\n  public name: string = null;\r\n  public downloadUrl: string = null;\r\n  public urlPath: string = null;\r\n  public children: IContentTree[] = [];\r\n}","import Octokit from '@octokit/rest';\r\nimport ContentNode from './ContentNode';\r\nimport ContentTree from './ContentTree';\r\n\r\nexport default class GitHubContentService {\r\n  private readonly _octokit: Octokit;\r\n  private _owner = 'oleg3790';\r\n  private _repo = 'wiki';\r\n\r\n  constructor(auth: string = '') {\r\n    this._octokit = new Octokit({\r\n      auth: auth,\r\n      userAgent: 'wiki',\r\n      baseUrl: 'https://api.github.com',\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Gets an object that models the site-content branch's content\r\n   */\r\n  public async getSiteContentTree(): Promise<ContentTree> {\r\n    const nodes = await this._getContentNodes('wiki', 0, []);\r\n    return nodes.length > 0 ? this._buildContentTree(nodes) : null;\r\n  }\r\n\r\n  /**\r\n   * Recursively gets all content nodes based off of each resource node in the site-content branch \r\n   * @param pathNode Branch resource path\r\n   * @param contentCounter Used to remember count state during recursion\r\n   * @param tmpResultObj Object used to hold the result during the build\r\n   */\r\n  private async _getContentNodes(pathNode: string, contentCounter: number, initialContenNodes: ContentNode[]): Promise<ContentNode[]> {\r\n    try {\r\n      const response = await this._octokit.repos.getContents({ \r\n        owner: this._owner,\r\n        repo: this._repo,\r\n        path: `${pathNode}?ref=site-content`\r\n      });\r\n\r\n      if (response.status === 200) {\r\n        let tmpWorkItems: any[] = [];\r\n        let exit = false;\r\n        // Check if response data is array or object as response data is object when there is no other dir nodes under the content\r\n        if (Array.isArray(response.data)) {\r\n          tmpWorkItems = response.data;\r\n        } else if (typeof response.data === 'object') {\r\n          tmpWorkItems.push(response.data);\r\n        }\r\n\r\n        tmpWorkItems.forEach(workItem => {\r\n          const contentNode = new ContentNode(workItem)\r\n          // Recusion exit condition: dont add existing nodes to collection\r\n          if (this._contentNodeExists(initialContenNodes, contentNode)) {\r\n            exit = true;\r\n            return;\r\n          }\r\n          initialContenNodes.push(new ContentNode(workItem));                    \r\n        });\r\n\r\n        if (exit) {\r\n          return initialContenNodes;\r\n        }\r\n\r\n        for (let i = contentCounter; i < initialContenNodes.length; i++) {\r\n          if (initialContenNodes[i].Type !== 'file') {\r\n            const encodedUri = encodeURIComponent(initialContenNodes[i].Path);\r\n            return await this._getContentNodes(encodedUri, i + 1, initialContenNodes);\r\n          }\r\n        }         \r\n      } else {\r\n        console.log(`GitHub API responded with ${response.status} with ${response.data.length} data elements`);\r\n      }\r\n      return initialContenNodes;\r\n    } catch (ex) {\r\n      console.log(`GitHubContentService.doGetContents Error - ${ex.message}`);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  private _buildContentTree(nodes: ContentNode[]): ContentTree {\r\n    let contentTree: ContentTree = new ContentTree();\r\n\r\n    nodes\r\n      .filter(n => n.Type === 'file')\r\n      .forEach(n => {\r\n        const pathLevels = n.Path.split('/');\r\n        let indexFile = pathLevels.pop();\r\n        \r\n        if (indexFile && indexFile.match(/index\\.md/i)) {\r\n          pathLevels.reduce((prev, path, i) => {                      \r\n            if (pathLevels.length - i - 1) {\r\n              if (prev.children && prev.children.length) {\r\n                return (prev.children as Array<any>).find(c => c.name === path) || prev;\r\n              }\r\n\r\n              prev.name = prev.name || path;\r\n              prev.children = prev.children || [];                            \r\n            } else {\r\n              prev.children.push({ name: path, children: [], downloadUrl: n.DownloadUrl, urlPath: this._toUrlSafePath(path) });\r\n            }\r\n            return prev; \r\n          }, contentTree);\r\n        }\r\n    });        \r\n    return contentTree;\r\n  }\r\n\r\n  /**\r\n   * Check if node exists in contentNodes\r\n   * @param contentNodes \r\n   * @param node \r\n   */\r\n  private _contentNodeExists(contentNodes: ContentNode[], node: ContentNode) {\r\n    return contentNodes.filter(n => n.Path === node.Path).length > 0;\r\n  }\r\n\r\n  private _toUrlSafePath(pathElement: string): string {\r\n    const regexReplacements = [\r\n      {from: /c#/g, to: 'c-sharp'},\r\n      {from: /\\.+/g, to: 'dot'},\r\n      {from: /\\s{2,}/g, to: ' '},\r\n      {from: /[\\s/\\\\]+/g, to: '-'},\r\n      {from: /[()+~=!@#$%^&*{}?]+/g, to: ''},\r\n    ];\r\n\r\n    regexReplacements.forEach(r => {\r\n      pathElement = pathElement.toLowerCase().replace(r.from, r.to);\r\n    })\r\n    return pathElement;\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactMarkdown from 'react-markdown';\r\nimport '../styles/App.scss';\r\n\r\ninterface INodeDetailProps {\r\n  contentUrl: string|null;\r\n}\r\n\r\ninterface INodeDetailState {\r\n  content: string|null;\r\n}\r\n\r\nexport default class NodeDetails extends React.Component<INodeDetailProps, INodeDetailState> {\r\n  constructor(props: INodeDetailProps) {\r\n    super(props);\r\n    this.state = {\r\n      content: null\r\n    }\r\n  }\r\n\r\n  async componentDidMount() {\r\n    if (this.props.contentUrl) {\r\n      const response = await fetch(this.props.contentUrl);\r\n      this.setState({ content: await response.text() });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"node-details\">\r\n        {this.state.content && <ReactMarkdown source={this.state.content as string} escapeHtml={false}/>}\r\n      </div>\r\n    );\r\n  }\r\n}","import React from 'react';\r\nimport './styles/App.scss';\r\nimport { HashRouter, Route } from 'react-router-dom';\r\nimport Layout from './Layout';\r\nimport GitHubContentService from './commons/GitHubContentService';\r\nimport { IContentTree } from './commons/ContentTree';\r\nimport NodeDetails from './commons/NodeDetails';\r\n\r\ninterface IAppState {\r\n  contentTree: IContentTree;\r\n  isError: boolean;\r\n  isBusy: boolean;\r\n}\r\n\r\nexport default class App extends React.Component<any, IAppState> {\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.state = {\r\n      contentTree: null,\r\n      isError: false,\r\n      isBusy: false,\r\n    }\r\n  }\r\n\r\n  async componentDidMount() {\r\n    this.toggleIsBusy();\r\n\r\n    try {\r\n      let ghAuth = localStorage.getItem('auth') || '';\r\n\r\n      if (!ghAuth) {\r\n        const authResponse = await fetch('http://olegkrysko-wiki-auth.azurewebsites.net/api/key', {\r\n          method: 'GET',\r\n          headers: {\r\n            'Request-Item': 'ghKey',\r\n            'Content-Type': 'text/plain'\r\n          }\r\n        });\r\n    \r\n        if (authResponse.status == 200) {\r\n          ghAuth = await authResponse.text();\r\n          localStorage.setItem('auth', ghAuth);\r\n          console.debug('auth retrieved successfully');\r\n        } else {\r\n          console.log('Could not get auth for gh repo, requests to GH API will be limited');\r\n        }\r\n      }\r\n\r\n      const ghContentService = new GitHubContentService(ghAuth);\r\n      const tree = await ghContentService.getSiteContentTree();\r\n\r\n      if (tree == null) {\r\n        console.log('No tree content could be loaded');\r\n        throw null;\r\n      }\r\n\r\n      this.setState({ contentTree: tree });\r\n    } catch {\r\n      this.setState({ isError: true });\r\n    }\r\n\r\n    this.toggleIsBusy();\r\n  }\r\n\r\n  toggleIsBusy = () => {\r\n    this.setState({ isBusy: !this.state.isBusy });\r\n  }\r\n\r\n  /**\r\n   * Recursively maps routes, using the content tree\r\n   * @param content \r\n   * @param initialRoutes Any initial routes to be passed \r\n   */\r\n  mapRoutes = (contentTree: IContentTree, initialRoutes: JSX.Element[] = []): JSX.Element[] => {\r\n    contentTree.children.forEach(node => {\r\n      if (node.downloadUrl && node.urlPath) {\r\n        initialRoutes.push(\r\n          <Route key={node.urlPath} path={`/${node.urlPath}`} \r\n            render={(routeProps) => <NodeDetails {...routeProps} contentUrl={node.downloadUrl}/>}/>);\r\n      }        \r\n      return this.mapRoutes(node, initialRoutes);\r\n    });\r\n    return initialRoutes;\r\n  }\r\n\r\n  render() {\r\n    const { contentTree, isBusy, isError } = this.state;\r\n    return (\r\n      <HashRouter basename=\"/\">\r\n        <Layout contentTree={contentTree} isBusy={isBusy}>\r\n          <div>\r\n            {isError \r\n              ? <h6 className=\"text-danger\">Could not load content, try again later</h6> \r\n              : (contentTree && this.mapRoutes(contentTree))}\r\n          </div>\r\n        </Layout>\r\n      </HashRouter>\r\n    );\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './styles/index.scss';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/logo.1e842800.png\";"],"sourceRoot":""}