{"version":3,"sources":["commons/tree-view/TreeNode.tsx","commons/tree-view/TreeView.tsx","Navigation.tsx","commons/BusyMask.tsx","Layout.tsx","commons/ContentNode.ts","commons/ContentTree.ts","commons/GitHubContentService.ts","commons/NodeDetails.tsx","App.tsx","serviceWorker.ts","index.tsx","images/logo.png"],"names":["TreeNode","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","_handleCollapseToggle","e","setState","collapsed","state","recurseChildren","childrenNodes","map","node","react","key","name","className","concat","_this$props","onClick","children","length","index_es","icon","faChevronRight","faChevronDown","size","react_router_dom","to","urlPath","React","TreeView","contentTree","TreeNode_TreeNode","mapToTreeNodes","Navigation","react_default","a","createElement","id","tree_view_TreeView","BusyMask","Layout","src","logo","width","height","alt","isBusy","commons_BusyMask","src_Navigation","ContentNode","responseData","DownloadUrl","GitUrl","HTMLUrl","Name","Path","SHA","Size","Type","URL","Links","download_url","git_url","html_url","path","sha","type","url","Git","_links","git","HTML","html","Self","self","ContentTree","downloadUrl","GitHubContentService","_octokit","_owner","_repo","Octokit","auth","userAgent","baseUrl","_getContentNodes","nodes","_buildContentTree","pathNode","contentCounter","initialContenNodes","repos","getContents","owner","repo","response","status","tmpWorkItems","exit","Array","isArray","data","push","forEach","workItem","contentNode","_contentNodeExists","i","encodedUri","encodeURIComponent","console","log","_context2","t0","message","_this2","filter","n","pathLevels","split","indexFile","pop","match","reduce","prev","find","c","_toUrlSafePath","contentNodes","pathElement","from","r","toLowerCase","replace","NodeDetails","content","contentUrl","fetch","text","react_markdown_default","source","escapeHtml","Component","App","toggleIsBusy","mapRoutes","initialRoutes","arguments","undefined","react_router","render","routeProps","NodeDetails_NodeDetails","assign","ghContentService","getSiteContentTree","tree","_this$state","basename","Boolean","window","location","hostname","ReactDOM","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.a9ce3e64.chunk.js","sourcesContent":["import * as React from 'react';\r\nimport '../../styles/TreeView.scss';\r\nimport '../../styles/App.scss';\r\nimport { Link } from 'react-router-dom';\r\nimport ContentTree from '../ContentTree';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faChevronRight, faChevronDown } from '@fortawesome/free-solid-svg-icons';\r\n\r\ninterface ITreeNodeProps {\r\n    node: ContentTree;\r\n    className?: string;\r\n}\r\n\r\ninterface ITreeNodeState {\r\n    collapsed: boolean\r\n}\r\n\r\nexport default class TreeNode extends React.Component<ITreeNodeProps, ITreeNodeState> {  \r\n    constructor(props: ITreeNodeProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            collapsed: false\r\n        }\r\n    }\r\n\r\n    private _handleCollapseToggle = (e: React.MouseEvent) => {\r\n        this.setState({ collapsed: !this.state.collapsed });\r\n    }\r\n    \r\n    render(): JSX.Element {\r\n        const { node, className } = this.props;\r\n        const { collapsed } = this.state;\r\n\r\n        if (node) {            \r\n            return (\r\n                <ul key={node.name} className={`nav-item disable-selection ${className}`}>\r\n                    <div className=\"row no-gutters pt-1 pb-1\">\r\n                        <span className=\"col-1 text-center\" onClick={this._handleCollapseToggle}>\r\n                        {(node.children && node.children.length) \r\n                            ? <FontAwesomeIcon icon={collapsed ? faChevronRight : faChevronDown} size=\"sm\"/>\r\n                            : null}\r\n                        </span>\r\n                        <Link className=\"col-11 nav-link pt-0 pb-1\" to={`/${node.urlPath}`}>{node.name}</Link>\r\n                    </div>\r\n                    \r\n                    {(node.children && node.children.length)\r\n                        ? this.recurseChildren(node.children)\r\n                        : null}\r\n                </ul>\r\n            );\r\n        }\r\n        return null;\r\n    }\r\n\r\n    recurseChildren = (childrenNodes: ContentTree[]) => {\r\n        return childrenNodes.map(node => <TreeNode key={node.name} node={node} className={`pl-4 ${this.state.collapsed && \"tv-collapsed\"}`}/>)\r\n    }\r\n}","import * as React from 'react';\r\nimport ContentTree from '../ContentTree';\r\nimport TreeNode from './TreeNode';\r\n\r\ninterface ITreeViewProps {\r\n    contentTree: ContentTree\r\n}\r\n\r\nconst TreeView = (props: ITreeViewProps) => {\r\n    const { contentTree } = props;\r\n\r\n    const mapToTreeNodes = (contentTree: ContentTree): JSX.Element[] => {\r\n        return contentTree.children.map(node => {\r\n            return <TreeNode key={node.name} node={node} className=\"pl-0\"/>;\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {(contentTree && contentTree.children && contentTree.children.length)\r\n                ? mapToTreeNodes(contentTree)\r\n                : null\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TreeView;","import React from 'react';\r\nimport TreeView from './commons/tree-view/TreeView';\r\nimport ContentTree from './commons/ContentTree';\r\n\r\ninterface INavigationProps {\r\n    contentTree: ContentTree;\r\n}\r\n\r\nconst Navigation = (props: INavigationProps): JSX.Element => {    \r\n    return (\r\n        <div id=\"navigation\">\r\n            <ul className=\"nav flex-column\">\r\n                <TreeView contentTree={props.contentTree}/>\r\n            </ul>\r\n        </div>\r\n    );\r\n} \r\n\r\nexport default Navigation;","import * as React from 'react';\r\nimport '../styles/App.scss';\r\nimport '../styles/Loading.scss';\r\n\r\nconst BusyMask = (props: any) => {\r\n    return (\r\n        <div id=\"busy-mask\">\r\n            <div className=\"lds-ellipsis\"><div></div><div></div><div></div><div></div></div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default BusyMask;","import React from 'react';\r\nimport Navigation from './Navigation';\r\nimport logo from './images/logo.png';\r\nimport ContentTree from './commons/ContentTree';\r\nimport BusyMask from './commons/BusyMask';\r\n \r\ninterface ILayoutProps {\r\n    contentTree: ContentTree;\r\n    children: JSX.Element|JSX.Element[];\r\n    isBusy: boolean;\r\n}\r\n\r\nexport default function Layout(props: ILayoutProps) {\r\n    return (\r\n        <div className=\"container-fluid\">\r\n            <div id=\"main-banner\" className=\"row\">\r\n                <div className=\"col-6 p-1 pl-5\">\r\n                    <img id=\"main-logo\" src={logo} width=\"50px\" height=\"50px\" alt=\"logo\"/>\r\n                    <h3 id=\"main-title\" className=\"d-inline-block\">Technological Wiki</h3>\r\n                </div>\r\n            </div>\r\n            {props.isBusy\r\n                ? <BusyMask/>\r\n                : (\r\n                    <div className=\"row\">               \r\n                        <div className=\"col-xl-3 col-sm-5\">\r\n                            <Navigation contentTree={props.contentTree}/>\r\n                        </div>\r\n                        <div className=\" col-xl-9 col-sm-7 mt-3 pt-3\">\r\n                            {props.children}\r\n                        </div>\r\n                    </div>  \r\n                )}\r\n                      \r\n        </div>\r\n    );\r\n}","export interface IContentNodeLinks {\r\n    Git: string;\r\n    HTML: string;\r\n    Self: string;\r\n}\r\n\r\nexport interface IContentNode {\r\n    DownloadUrl: string;\r\n    GitUrl: string;\r\n    HTMLUrl: string;\r\n    Name: string;\r\n    Path: string;\r\n    SHA: string;\r\n    Size: number;\r\n    Type: string;\r\n    URL: string;\r\n    Links: IContentNodeLinks;\r\n}\r\n\r\n/**\r\n * Provides strong type and resolver for GitHub API data\r\n */\r\nexport default class ContentNode implements IContentNode {\r\n    public readonly DownloadUrl: string;\r\n    public readonly GitUrl: string;\r\n    public readonly HTMLUrl: string;\r\n    public readonly Name: string;\r\n    public readonly Path: string;\r\n    public readonly SHA: string;\r\n    public readonly Size: number;\r\n    public readonly Type: string;\r\n    public readonly URL: string;\r\n    public readonly Links: IContentNodeLinks;\r\n\r\n    constructor(responseData: any) {\r\n        this.DownloadUrl = responseData.download_url;\r\n        this.GitUrl = responseData.git_url;\r\n        this.HTMLUrl = responseData.html_url;\r\n        this.Name = responseData.name;\r\n        this.Path = responseData.path;\r\n        this.SHA = responseData.sha;\r\n        this.Size = responseData.size;\r\n        this.Type = responseData.type;\r\n        this.URL = responseData.url;\r\n        this.Links = {\r\n            Git: responseData._links.git,\r\n            HTML: responseData._links.html,\r\n            Self: responseData._links.self,\r\n        }\r\n    }\r\n}","export interface IContentTree {\r\n    name: string,\r\n    downloadUrl: string,\r\n    urlPath: string,\r\n    children: IContentTree[]\r\n}\r\n\r\nexport default class ContentTree implements IContentTree {\r\n    public name: string = null;\r\n    public downloadUrl: string = null;\r\n    public urlPath: string = null;\r\n    public children: IContentTree[] = [];\r\n}","import Octokit from '@octokit/rest';\r\nimport ContentNode from './ContentNode';\r\nimport ContentTree from './ContentTree';\r\n\r\nexport default class GitHubContentService {\r\n    private readonly _octokit: Octokit;\r\n    private _owner = 'oleg3790';\r\n    private _repo = 'wiki';\r\n\r\n    constructor() {\r\n        this._octokit = new Octokit({\r\n            auth: '',\r\n            userAgent: 'wiki',\r\n            baseUrl: 'https://api.github.com',\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Gets an object that models the site-content branch's content\r\n     */\r\n    public async getSiteContentTree(): Promise<ContentTree> {\r\n        const nodes = await this._getContentNodes('wiki', 0, []);\r\n        return nodes.length > 0 ? this._buildContentTree(nodes) : null;\r\n    }\r\n\r\n    /**\r\n     * Recursively gets all content nodes based off of each resource node in the site-content branch \r\n     * @param pathNode Branch resource path\r\n     * @param contentCounter Used to remember count state during recursion\r\n     * @param tmpResultObj Object used to hold the result during the build\r\n     */\r\n    private async _getContentNodes(pathNode: string, contentCounter: number, initialContenNodes: ContentNode[]): Promise<ContentNode[]> {\r\n        try {\r\n            const response = await this._octokit.repos.getContents({ \r\n                owner: this._owner,\r\n                repo: this._repo,\r\n                path: `${pathNode}?ref=site-content`\r\n            });\r\n\r\n            if (response.status === 200) {\r\n                let tmpWorkItems: any[] = [];\r\n                let exit = false;\r\n                // Check if response data is array or object as response data is object when there is no other dir nodes under the content\r\n                if (Array.isArray(response.data)) {\r\n                    tmpWorkItems = response.data;\r\n                } else if (typeof response.data === 'object') {\r\n                    tmpWorkItems.push(response.data);\r\n                }\r\n\r\n                tmpWorkItems.forEach(workItem => {\r\n                    const contentNode = new ContentNode(workItem)\r\n                    // Recusion exit condition: dont add existing nodes to collection\r\n                    if (this._contentNodeExists(initialContenNodes, contentNode)) {\r\n                        exit = true;\r\n                        return;\r\n                    }\r\n                    initialContenNodes.push(new ContentNode(workItem));                    \r\n                });\r\n\r\n                if (exit) {\r\n                    return initialContenNodes;\r\n                }\r\n\r\n                for (let i = contentCounter; i < initialContenNodes.length; i++) {\r\n                    if (initialContenNodes[i].Type !== 'file') {\r\n                        const encodedUri = encodeURIComponent(initialContenNodes[i].Path);\r\n                        return await this._getContentNodes(encodedUri, i + 1, initialContenNodes);\r\n                    }\r\n                }         \r\n            } else {\r\n                console.log(`GitHub API responded with ${response.status} with ${response.data.length} data elements`);\r\n            }\r\n            return initialContenNodes;\r\n        } catch (ex) {\r\n            console.log(`GitHubContentService.doGetContents Error - ${ex.message}`);\r\n            return [];\r\n        }\r\n    }\r\n\r\n    private _buildContentTree(nodes: ContentNode[]): ContentTree {\r\n        let contentTree: ContentTree = new ContentTree();\r\n\r\n        nodes\r\n            .filter(n => n.Type === 'file')\r\n            .forEach(n => {\r\n                const pathLevels = n.Path.split('/');\r\n                let indexFile = pathLevels.pop();\r\n                \r\n                if (indexFile && indexFile.match(/index\\.md/i)) {\r\n                    pathLevels.reduce((prev, path, i) => {                      \r\n                        if (pathLevels.length - i - 1) {\r\n                            if (prev.children && prev.children.length) {\r\n                                return (prev.children as Array<any>).find(c => c.name === path) || prev;\r\n                            }\r\n\r\n                            prev.name = prev.name || path;\r\n                            prev.children = prev.children || [];                            \r\n                        } else {\r\n                            prev.children.push({ name: path, children: [], downloadUrl: n.DownloadUrl, urlPath: this._toUrlSafePath(path) });\r\n                        }\r\n                        return prev; \r\n                    }, contentTree);\r\n                }\r\n        });        \r\n        return contentTree;\r\n    }\r\n\r\n    /**\r\n     * Check if node exists in contentNodes\r\n     * @param contentNodes \r\n     * @param node \r\n     */\r\n    private _contentNodeExists(contentNodes: ContentNode[], node: ContentNode) {\r\n        return contentNodes.filter(n => n.Path === node.Path).length > 0;\r\n    }\r\n\r\n    private _toUrlSafePath(pathElement: string): string {\r\n        const regexReplacements = [\r\n            {from: /c#/g, to: 'c-sharp'},\r\n            {from: /\\.+/g, to: 'dot'},\r\n            {from: /\\s{2,}/g, to: ' '},\r\n            {from: /[\\s/\\\\]+/g, to: '-'},\r\n            {from: /[()+~=!@#$%^&*{}?]+/g, to: ''},\r\n        ];\r\n\r\n        regexReplacements.forEach(r => {\r\n            pathElement = pathElement.toLowerCase().replace(r.from, r.to);\r\n        })\r\n        return pathElement;\r\n    }\r\n}\r\n","import React from 'react';\r\nimport ReactMarkdown from 'react-markdown';\r\nimport '../styles/App.scss';\r\n\r\ninterface INodeDetailProps {\r\n    contentUrl: string|null;\r\n}\r\n\r\ninterface INodeDetailState {\r\n    content: string|null;\r\n}\r\n\r\nexport default class NodeDetails extends React.Component<INodeDetailProps, INodeDetailState> {\r\n    constructor(props: INodeDetailProps) {\r\n        super(props);\r\n        this.state = {\r\n            content: null\r\n        }\r\n    }\r\n\r\n    async componentDidMount() {\r\n        if (this.props.contentUrl) {\r\n            const response = await fetch(this.props.contentUrl);\r\n            this.setState({ content: await response.text() });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"node-details\">\r\n                {this.state.content && <ReactMarkdown source={this.state.content as string} escapeHtml={false}/>}\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport './styles/App.scss';\r\nimport { HashRouter, Route } from 'react-router-dom';\r\nimport Layout from './Layout';\r\nimport GitHubContentService from './commons/GitHubContentService';\r\nimport { IContentTree } from './commons/ContentTree';\r\nimport NodeDetails from './commons/NodeDetails';\r\n\r\ninterface IAppState {\r\n    contentTree: IContentTree;\r\n    isBusy: boolean;\r\n}\r\n\r\nexport default class App extends React.Component<any, IAppState> {\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            contentTree: null,\r\n            isBusy: false,\r\n        }\r\n    }\r\n\r\n    async componentDidMount() {\r\n        this.toggleIsBusy();\r\n        const ghContentService = new GitHubContentService();\r\n        const tree = await ghContentService.getSiteContentTree();\r\n        this.setState({ contentTree: tree });\r\n        this.toggleIsBusy();\r\n    }\r\n\r\n    toggleIsBusy = () => {\r\n        this.setState({ isBusy: !this.state.isBusy });\r\n    }\r\n\r\n    /**\r\n     * Recursively maps routes, using the content tree\r\n     * @param content \r\n     * @param initialRoutes Any initial routes to be passed \r\n     */\r\n    mapRoutes = (contentTree: IContentTree, initialRoutes: JSX.Element[] = []): JSX.Element[] => {\r\n        contentTree.children.forEach(node => {\r\n            if (node.downloadUrl && node.urlPath) {\r\n                initialRoutes.push(\r\n                    <Route key={node.urlPath} path={`/${node.urlPath}`} \r\n                        render={(routeProps) => <NodeDetails {...routeProps} contentUrl={node.downloadUrl}/>}/>);\r\n            }        \r\n            return this.mapRoutes(node, initialRoutes);\r\n        });\r\n        return initialRoutes;\r\n    }\r\n\r\n    render() {\r\n        const { contentTree, isBusy } = this.state;\r\n        return (\r\n            <HashRouter basename=\"/\">\r\n                <Layout contentTree={contentTree} isBusy={isBusy}>\r\n                    <div>\r\n                        {contentTree && this.mapRoutes(contentTree)}\r\n                    </div>\r\n                </Layout>\r\n            </HashRouter>\r\n        );\r\n    }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './styles/index.scss';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/logo.1e842800.png\";"],"sourceRoot":""}